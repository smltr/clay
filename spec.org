* Explicit Syntax Specification

** Core Forms

    * Word: Any identifier or literal
    #+BEGIN_SRC py
        myvar
        42
        "hello"
    #+END_SRC

    * List: Comma-separated items in parentheses (data structure, no execution)
    #+BEGIN_SRC py
        (item1, item2, item3)
        (func, arg1, arg2)  # just a list containing func reference and args
    #+END_SRC

    * Function Call: Explicit invocation only
    #+BEGIN_SRC py
        func()              # call func with no args
        func(arg1, arg2)    # call func with args
    #+END_SRC

** Key Distinction

    #+BEGIN_SRC py
        func()              # function call (execution)
        func                # function reference (value)
        (func, arg1, arg2)  # list containing func reference and args (data)
        func(arg1, arg2)    # function call with args (execution)
    #+END_SRC

    This means:
    + `(+, 1, 2)` is just a list containing the plus function and two numbers
    + `+(1, 2)` actually performs the addition
    + You can pass `(+, 1, 2)` around as data, store it, manipulate it
    + You need explicit `()` to trigger execution

* Whitespace Syntax Specification

** Core Concepts

    * Word: The fundamental unit. Any sequence of characters that forms an identifier or literal.

    * Statement: A complete instruction, either a standalone word or a function call.

    * Function Call: Can be explicit (with parentheses) or implicit (with whitespace/indentation).

** Syntax Rules

    * Same-Level Items
        Words at the same indentation level are separate statements:
        #+BEGIN_SRC py
            somefunc
            anotherfunc
        #+END_SRC
        → `somefunc(), anotherfunc()`

    * Space-Separated Words
        Words separated by spaces on the same line form a function call:
        #+BEGIN_SRC py
            somefunc arg1 arg2
        #+END_SRC
        → `somefunc(arg1, arg2)`

    * Indented Arguments
        Indented words become arguments to the preceding line's "open" function call:
        #+BEGIN_SRC py
            somefunc
                arg1
                arg2
        #+END_SRC
        → `somefunc(arg1, arg2)`

    * Mixed Same-Line and Indented Arguments
        Space-separated and indented arguments combine:
        #+BEGIN_SRC py
            somefunc arg1
                arg2
                arg3
        #+END_SRC
        → `somefunc(arg1, arg2, arg3)`

    * Explicit Parentheses Rule
        Explicit `()` closes a function call - no indented arguments allowed:
        #+BEGIN_SRC py
            somefunc()
                arg1  # INVALID
        #+END_SRC

        However, explicit calls can be arguments to open contexts:
        #+BEGIN_SRC py
            outerfunc innerfunc()
                arg1
        #+END_SRC
        → `outerfunc(innerfunc(), arg1)`

    * Nested Indentation
        Multiple indentation levels create nested function calls:
        #+BEGIN_SRC py
            outerfunc
                innerfunc
                    arg1
                    arg2
                arg3
        #+END_SRC
        → `outerfunc(innerfunc(arg1, arg2), arg3)`

** Implementation Notes

    * Open Context: A function call without explicit closing parentheses that can accept indented arguments
    * Closed Context: A function call with explicit `()` that cannot accept further arguments
    * Indentation Target: Indented arguments always attach to the nearest preceding open context
    * Line Grouping: All space-separated words on a line are treated as a single unit for indentation purposes

** Edge Cases

    * Empty lines are ignored
    * Comments follow language-specific rules and don't affect indentation
    * Mixed tabs/spaces should be handled according to language conventions
    * Trailing commas in explicit syntax should be equivalent to their indented counterparts
